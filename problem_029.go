/*Problem 29 - Distinct powers

Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/


package main

import (
		"fmt"
		"math/big"
)

const A = 100;
const B = 100;

func main() {

	set := make( map[string]bool ); //faster to convert bigInt to string and store that?

	var i int64;
	for i = 2; i <= A; i++ {

		var j int64;
		for j = 2; j <= B; j++ {

			c := big.NewInt( 0 );

			c.Exp( big.NewInt( i ), big.NewInt( j ), big.NewInt( 0 ) );

			val := c.String(); // we convert to string because within the map, if we do *bigInt, it goes by references.

			set[val] = true;

		}

	}

	fmt.Printf( "Distinct terms: %v\n", len( set ) )

}