/*Problem 2 - Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

package main

import "fmt"

func main() {

    x := 1;
    y := 2;
    z := 0;

    max := 4000000; //four million
    sum := 2; //start at 2, because y = 2;

    //initialize the first 'z' to x + y; conditional; continuously change z;
    for z = fibonacciNextTerm( x, y ); z < max; z = fibonacciNextTerm( x, y ){
    	if z % 2 == 0 {
    		sum += z;
    	}
    	x = y;
    	y = z;
    	// fmt.Printf( "%d : %d : %d\n", x, y, z );
    }

	fmt.Println( sum );

}

func fibonacciNextTerm( x int, y int ) int {
	return ( x + y );
}